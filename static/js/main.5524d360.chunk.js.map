{"version":3,"sources":["components/atoms/stackBox/StackBox.jsx","components/molecules/stackDisplay/StackDisplay.jsx","components/atoms/button/Button.jsx","components/molecules/keypad/Keypad.jsx","components/molecules/inputDisplay/InputDisplay.jsx","components/molecules/stackOperations/StackOperations.jsx","components/organisms/inputArea/InputArea.jsx","utils/Stack/Stack.js","utils/arithmetic.js","components/templates/controller/Controller.jsx","App.jsx","serviceWorker.js","index.js"],"names":["StackBox","props","value","react_default","a","createElement","Card","bg","body","BlankSpace","styled","div","_templateObject","StackDisplay","memory","Fragment","map","item","index","stackBox_StackBox","key","concat","ButtonBox","Button_templateObject","Button","buttonName","variant","es_Button","onClick","block","Keypad","buttonCol","num","Col","button_Button","buttons","clickHandler","_this","Row","char","render","Container","React","Component","DisplayBox","InputDisplay_templateObject","DisplayText","h1","_templateObject2","InputDisplay","stackOperands","name","tooltip","mathOperands","createButton","operandInfo","Popover","Object","assign","id","Title","Content","OverlayTrigger","trigger","delay","show","hide","overlay","StackOperations","operation","InputArea","buttonArea","keypad_Keypad","stackOperations_StackOperations","inputDisplay","InputAreaBox","InputArea_templateObject","inputDisplay_InputDisplay","Stack","this","classCallCheck","isEmpty","length","push","unshift","peek","Error","pop","poppedItem","slice","operate","fn","numArgs","itemsForOperation","apply","addition","item1","item2","subtraction","multiplication","division","Controller","possibleConstructorReturn","getPrototypeOf","call","input","couldNotBeANumber","isStackOperator","handleStackInput","isMathOperator","handleMathInput","isCalcOperator","handleCalcInput","handleNumInput","inputNum","state","setState","parseInt","_this$state","stack","stackDisplay_StackDisplay","react_keyboard_event_handler_default","handleKeys","onKeyEvent","inputArea_InputArea","_this$state2","e","window","alert","forceUpdate","STACK_OPERATIONS","MATH_OPERATIONS","CALC_OPERATIONS","isNaN","includes","App","className","controller_Controller","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5524d360.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Card } from 'react-bootstrap';\n\nconst StackBox = props => {\n  const { value } = props;\n\n  return (\n    <Card\n      bg=\"light\"\n      body\n    >\n      <h1>{value}</h1>\n    </Card>\n  );\n};\n\nStackBox.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nexport default StackBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport StackBox from '../../atoms/stackBox/StackBox';\n\nconst StackDisplay = props => {\n  const { memory } = props;\n\n  return (\n    <>\n      {memory.map((item, index) => (\n        <StackBox value={item} key={`${item}-${index}`} />\n      ))}\n      <BlankSpace />\n    </>\n  );\n};\n\nconst BlankSpace = styled.div`\n  height: 50vh;\n`;\n\nStackDisplay.propTypes = {\n  memory: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default StackDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nimport { Button as BootstrapButton } from 'react-bootstrap';\n\nconst ButtonBox = styled.div`\n  margin: 5px 5px 5px 5px;\n`;\n\nconst Button = props => {\n  const { buttonName, variant } = props;\n\n  const handleClick = () => {\n    props.onClick(props.buttonName);\n  };\n\n  return (\n    <ButtonBox>\n      <BootstrapButton\n        buttonName={buttonName}\n        onClick={handleClick}\n        block\n        variant={variant}\n      >\n        {buttonName}\n      </BootstrapButton>\n    </ButtonBox>\n  );\n};\n\nButton.propTypes = {\n  buttonName: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onClick: PropTypes.func.isRequired,\n  variant: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Button from '../../atoms/button/Button';\n\nclass Keypad extends React.Component {\n  static propTypes = {\n    clickHandler: PropTypes.func.isRequired,\n  };\n\n  buttonCol = (num, onClick) => (\n    <Col key={num}>\n      <Button\n        buttonName={num}\n        onClick={onClick}\n        variant=\"info\"\n      />\n    </Col>\n  );\n\n  buttons = () => {\n    const { clickHandler } = this.props;\n    return (\n      <>\n        <Row>{[7, 8, 9].map(num => this.buttonCol(num, clickHandler))}</Row>\n        <Row>{[4, 5, 6].map(num => this.buttonCol(num, clickHandler))}</Row>\n        <Row>{[1, 2, 3].map(num => this.buttonCol(num, clickHandler))}</Row>\n        <Row>{['C', 0, '+/-'].map(char => this.buttonCol(char, clickHandler))}</Row>\n      </>\n    );\n  };\n\n  render = () => <Container>{this.buttons()}</Container>;\n}\n\nexport default Keypad;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst DisplayBox = styled.div`\n  background-color: #007bff;\n`;\n\nconst DisplayText = styled.h1`\n  color: white;\n`;\n\nconst InputDisplay = props => {\n  const { num } = props;\n\n  return (\n    <DisplayBox>\n      <DisplayText>{num}</DisplayText>\n    </DisplayBox>\n  );\n};\n\nInputDisplay.propTypes = {\n  num: PropTypes.number.isRequired,\n};\n\nexport default InputDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  OverlayTrigger, Popover, Container, Row, Col,\n} from 'react-bootstrap';\nimport Button from '../../atoms/button/Button';\n\nconst stackOperands = [\n  {\n    name: 'push',\n    tooltip: 'places an item on the top of the stack',\n  },\n  {\n    name: 'pop',\n    tooltip:\n      'removes the top item and returns it -- here, the return is placed in the keyboard input',\n  },\n  {\n    name: 'peek',\n    tooltip: 'shows the item on the top of the stack',\n  },\n  {\n    name: 'isEmpty',\n    tooltip: 'true when the stack is empty, otherwise false',\n  },\n];\n\nconst mathOperands = [\n  {\n    name: '+',\n    tooltip: 'adds the first two items on the stack, and pushes the result back to the top',\n  },\n  {\n    name: '-',\n    tooltip:\n      'subtracts the second item on the stack from the first, and pushes the result back to the top',\n  },\n  {\n    name: '*',\n    tooltip: 'multiplies the first two items on the stack, and pushes the result back to the top',\n  },\n  {\n    name: '/',\n    tooltip:\n      'divides the first item on the stack by the second, and pushes the result back to the top',\n  },\n];\n\nconst createButton = (operandInfo, clickHandler, props) => {\n  const tooltip = (\n    <Popover\n      {...props}\n      id={`${operandInfo.name}-popover`}\n    >\n      <Popover.Title>{operandInfo.name}</Popover.Title>\n      <Popover.Content>{operandInfo.tooltip}</Popover.Content>\n    </Popover>\n  );\n\n  return (\n    <Col key={operandInfo.name}>\n      <OverlayTrigger\n        trigger={['hover', 'active']}\n        delay={{ show: 600, hide: 400 }}\n        overlay={tooltip}\n      >\n        <span>\n          <Button\n            buttonName={operandInfo.name}\n            onClick={clickHandler}\n            variant=\"warning\"\n          />\n        </span>\n      </OverlayTrigger>\n    </Col>\n  );\n};\n\nconst StackOperations = props => {\n  const { clickHandler } = props;\n\n  return (\n    <Container>\n      <Row>{stackOperands.map(operation => createButton(operation, clickHandler, props))}</Row>\n      <Row>{mathOperands.map(operation => createButton(operation, clickHandler, props))}</Row>\n    </Container>\n  );\n};\n\nStackOperations.propTypes = {\n  clickHandler: PropTypes.func.isRequired,\n};\n\nexport default StackOperations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Keypad from '../../molecules/keypad/Keypad';\nimport InputDisplay from '../../molecules/inputDisplay/InputDisplay';\nimport StackOperations from '../../molecules/stackOperations/StackOperations';\n\nclass InputArea extends React.Component {\n  static propTypes = {\n    inputDisplay: PropTypes.number.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n  };\n\n  buttonArea = () => {\n    const { clickHandler } = this.props;\n\n    return (\n      <>\n        <Keypad clickHandler={clickHandler} />\n        <StackOperations clickHandler={clickHandler} />\n      </>\n    );\n  };\n\n  render = () => {\n    const { inputDisplay } = this.props;\n\n    const InputAreaBox = styled.div`\n      background-color: #f8f9fa;\n      position: fixed;\n      bottom: 0;\n      align-items: center;\n      width: 100vw;\n    `;\n\n    return (\n      <InputAreaBox>\n        <InputDisplay num={inputDisplay} />\n        {this.buttonArea()}\n      </InputAreaBox>\n    );\n  };\n}\n\nexport default InputArea;\n","class Stack {\n  constructor() {\n    this.memory = [];\n  }\n\n  isEmpty = () => this.memory.length === 0;\n\n  push = item => {\n    this.memory.unshift(item);\n  };\n\n  peek = () => {\n    if (this.memory.length === 0) {\n      throw new Error('Empty stack');\n    }\n    return this.memory[0];\n  };\n\n  pop = () => {\n    if (this.memory.length === 0) {\n      throw new Error('Empty stack');\n    }\n    const poppedItem = this.memory[0];\n    this.memory = this.memory.slice(1);\n    return poppedItem;\n  };\n\n  /*\n  If there aren't enough items, throw a \"Not enough items\" error.\n   */\n\n  /**\n   *   Higher-order function that applies a function with N arguments to N items in the stack.\n   * @param  {Function} fn A function that operates on N arguments.\n   * @return {none}      None\n   */\n  operate = fn => {\n    let numArgs = fn.length;\n\n    // if there aren't enough items for fn to operate on, throw error\n    if (this.memory.length < numArgs) {\n      throw new Error('Not enough items.');\n    }\n\n    const itemsForOperation = [];\n\n    while (numArgs > 0) {\n      itemsForOperation.push(this.pop());\n      numArgs += -1;\n    }\n\n    this.push(fn(...itemsForOperation));\n  };\n}\n\nexport default Stack;\n","export const addition = (item1, item2) => item1 + item2;\n\nexport const subtraction = (item1, item2) => item1 - item2;\n\nexport const multiplication = (item1, item2) => item1 * item2;\n\nexport const division = (item1, item2) => item1 / item2;\n","import React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nimport StackDisplay from '../../molecules/stackDisplay/StackDisplay';\n\nimport InputArea from '../../organisms/inputArea/InputArea';\n\nimport Stack from '../../../utils/Stack/Stack';\n\nimport {\n  addition, subtraction, multiplication, division,\n} from '../../../utils/arithmetic';\n\nclass Controller extends React.Component {\n  static STACK_OPERATIONS = ['push', 'pop', 'peek', 'isEmpty'];\n\n  static MATH_OPERATIONS = ['+', '-', '*', '/'];\n\n  static CALC_OPERATIONS = ['C', '+/-'];\n\n  static couldNotBeANumber = input => isNaN(parseInt(input));\n\n  static isStackOperator = input => Controller.STACK_OPERATIONS.includes(input);\n\n  static isMathOperator = input => Controller.MATH_OPERATIONS.includes(input);\n\n  static isCalcOperator = input => Controller.CALC_OPERATIONS.includes(input);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputNum: 0,\n      stack: new Stack(),\n    };\n  }\n\n  input = input => {\n    if (Controller.couldNotBeANumber(input)) {\n      if (Controller.isStackOperator(input)) {\n        this.handleStackInput(input);\n      } else if (Controller.isMathOperator(input)) {\n        this.handleMathInput(input);\n      } else if (Controller.isCalcOperator(input)) {\n        this.handleCalcInput(input);\n      }\n    } else {\n      this.handleNumInput(input);\n    }\n  };\n\n  handleNumInput = input => {\n    const { inputNum } = this.state;\n\n    this.setState({\n      inputNum: inputNum * 10 + parseInt(input),\n    });\n  };\n\n  handleStackInput(input) {\n    const { inputNum, stack } = this.state;\n\n    switch (input) {\n      case 'push':\n        stack.push(inputNum);\n        this.setState({ inputNum: 0 });\n        break;\n      case 'pop':\n        try {\n          this.setState({ inputNum: stack.pop() });\n        } catch (e) {\n          window.alert(e);\n        }\n        break;\n      case 'isEmpty':\n        window.alert(stack.isEmpty());\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleMathInput(input) {\n    const { stack } = this.state;\n\n    switch (input) {\n      case '+':\n        stack.operate(addition);\n        break;\n      case '-':\n        stack.operate(subtraction);\n        break;\n      case '*':\n        stack.operate(multiplication);\n        break;\n      case '/':\n        stack.operate(division);\n        break;\n      default:\n        break;\n    }\n\n    this.forceUpdate();\n  }\n\n  handleCalcInput(input) {\n    const { inputNum } = this.state;\n\n    switch (input) {\n      case 'C':\n        this.setState({ inputNum: 0 });\n        break;\n      case '+/-':\n        this.setState({ inputNum: inputNum * -1 });\n        break;\n      default:\n        break;\n    }\n  }\n\n  render = () => {\n    const { inputNum, stack } = this.state;\n    return (\n      <div>\n        <StackDisplay memory={stack.memory} />\n        <KeyboardEventHandler\n          handleKeys={['numeric']}\n          onKeyEvent={key => this.input(key)}\n        />\n        <div>\n          <InputArea\n            inputDisplay={inputNum}\n            clickHandler={this.input}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default Controller;\n","import React from 'react';\nimport './App.css';\nimport Controller from './components/templates/controller/Controller';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Controller />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}